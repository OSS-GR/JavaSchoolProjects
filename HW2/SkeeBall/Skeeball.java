import java.util.Scanner;
import java.util.Random;
import java.util.ArrayList;

/**
 * A custom Exception to be thrown whenever user input is an integer outside the interval [1,8].
 */
class SkeeballInputOutOfBoundsException extends Exception {

    public SkeeballInputOutOfBoundsException(String message) {
        super(message);
    }
}

/**
 * Simulation of a game of Skee-Ball.
 */
public class Skeeball {

    /**
     * Maximum number of plays allowed per game.
     */
    final static int MAX_PLAYS = 8;

    /**
     * All possible points in a game of Skeeball.
     */
    final int[] hallValue = {0,10,20,40,60,80};


    /**
     * Uniformly generates an integer between [1,100] and uses the integer to choose how many points to return.
     * @return Integer from arr hallValue.
     */
    private int generatePoints() {
        Random rand = new Random();
        int value = rand.nextInt(101);
        if (value < 6) return hallValue[5];
        if (value < 16) return hallValue[4];
        if (value < 31) return hallValue[3];
        if (value < 46) return hallValue[2];
        if (value < 66) return hallValue[1];
        else return hallValue[0];

    }


    /**
     * It simulates a game of Skeeball. It calls upon Skeeball.generate points and saves the value received inside an ArrayList that will be read by Skeeball.displayStats().
     * @param plays An integer in [1,8] received from the user when prompted for input at the beginning of the game.
     * @return An ArrayList that includes the scores generated by the method Skeeball.generatePoints().
     *  Its size is equal to "plays".
     * @throws InterruptedException because we use Thread.sleep().
     */
    private ArrayList<Integer> simulatePlay(int plays) throws InterruptedException{

        int size = plays;

        // Initialize ArrayList to the default size of 10
        ArrayList<Integer> Scores = new ArrayList<>();

        // Get the scores for the # of plays
        while(plays!= 0){

            Scores.add(generatePoints());   // Add current play's score to ArrayList

            System.out.printf("%s%d%s%d\n","Rolling ball #",size-plays + 1,". Landed in ",Scores.get(size-plays));      // Print current play's # and the points scored.
            Thread.sleep(1000);     // Interrupts the process for 1s in order to create some suspense.
            plays--;
        }

        return Scores;

    }

    /**
     * Displays a review of the game of Skee-ball we just played. It returns the rounds and the corresponding points scored in a "table"-like format.
     * @param Scores An ArrayList returned from Skeeball.simulatePlay() containing the scores from a game of Skee-Ball.
     * @throws InterruptedException because we use Thread.sleep().
     */
    private void displayStats(ArrayList<Integer> Scores) throws InterruptedException{

        int sum = 0,counter = 1;

        System.out.printf("\n%s\n","+-------+-------+");
        System.out.printf("%8s%9s\n","Play #","Score");
        System.out.printf("%s\n","+-------+-------+");

        Thread.sleep(1000);

        for (int points : Scores) {
            System.out.printf("%5d%8d\n",counter++,points);     // Prints out the outcome of simulatePlay()
                                                                // for all turns in a "table" format

            sum += points;
        }

        System.out.printf("\n%s%d","Total: ", sum);

    }




    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);    // Creates new instance of the Scanner class.
        Skeeball sk = new Skeeball();       // Creates a new instance of the Skeeball class.
        boolean wrongInput = true;    // Tells the Do...While loop when to stop.

        do {

                try {

                    System.out.println("Enter the number of plays (1-8)? ");

                    int input = sc.nextInt();       // Takes in user input. If the input in non-numerical, this will throw an InputMismatchException.

                        // Checks if the user input is within the accepted range.
                        if (input  > 0 && input <= MAX_PLAYS  ){

                                switch (input) {
                                    case 1 -> {
                                        sk.displayStats(sk.simulatePlay(1));
                                        wrongInput = false;
                                    }
                                    case 2 -> {
                                        sk.displayStats(sk.simulatePlay(2));
                                        wrongInput = false;
                                    }
                                    case 3 -> {
                                        sk.displayStats(sk.simulatePlay(3));
                                        wrongInput = false;
                                    }
                                    case 4 -> {
                                        sk.displayStats(sk.simulatePlay(4));
                                        wrongInput = false;
                                    }
                                    case 5 -> {
                                        sk.displayStats(sk.simulatePlay(5));
                                        wrongInput = false;
                                    }
                                    case 6 -> {
                                        sk.displayStats(sk.simulatePlay(6));
                                        wrongInput = false;
                                    }
                                    case 7 -> {
                                        sk.displayStats(sk.simulatePlay(7));
                                        wrongInput = false;
                                    }
                                    case 8 -> {
                                        sk.displayStats(sk.simulatePlay(MAX_PLAYS));
                                        wrongInput = false;
                                    }
                                }
                        }
                        else{
                            throw new SkeeballInputOutOfBoundsException(""); // Throws exception in the case that the user input is not between [1,8].
                            }
                }
                catch (Exception e ) { // Catches any exception that is part of the Exception class.
                    System.out.printf("%s\n","Invalid input. Please enter a number between 1 and 8.");
                    sc.nextLine();      // Clears anything left in the buffer.
                }
        }
        while(wrongInput);

        sc.close();     // Closes instance of Scanner.
    }

}

